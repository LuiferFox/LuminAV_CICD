pipeline {
  agent any

  environment {
    REGISTRY = "docker.io"
    ORG = "luiferfox"
    BACKEND_IMG = "${REGISTRY}/${ORG}/luminav-backend"
    FRONTEND_IMG = "${REGISTRY}/${ORG}/luminav-frontend"
    VERSION = "${BUILD_NUMBER}"
  }

  parameters {
    booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Desplegar autom√°ticamente al finalizar el build')
  }

  stages {

    stage('Checkout') {
      steps {
        echo 'üîç Clonando el c√≥digo desde GitHub...'
        checkout scm
      }
    }

    stage('Backend: Test') {
      steps {
        dir('LuminAVbackend') {
          echo 'üß™ Ejecutando pruebas del backend (JUnit)...'
          // Limpia, compila y prueba usando el POM
          bat 'mvn -B -q clean test -Dmaven.test.failure.ignore=true'
        }
      }
      post {
        always {
          // Publicar resultados de pruebas JUnit
          junit 'LuminAVbackend/target/surefire-reports/*.xml'
        }
      }
    }

    stage('Frontend: Test (opcional)') {
      when { expression { fileExists('LuminAVfrontend/package.json') } }
      steps {
        dir('LuminAVfrontend') {
          echo 'üß™ Ejecutando pruebas del frontend (Vitest)...'
          bat 'npm ci'
          bat 'npm run test -- --run || echo "‚ö†Ô∏è No se encontraron pruebas o se omitieron"'
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        echo 'üê≥ Iniciando sesi√≥n en Docker Hub, construyendo y subiendo im√°genes...'
        withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {

          // üîß FIX para Windows ‚Äî Login sin pipe
          bat """
          docker logout
          docker login -u %DOCKER_USER% -p %DOCKER_PASS%
          """

          // Backend
          dir('LuminAVbackend') {
            echo 'üõ†Ô∏è Construyendo imagen del backend...'
            bat "docker build -t %BACKEND_IMG%:%VERSION% ."
            bat "docker push %BACKEND_IMG%:%VERSION%"
          }

          // Frontend
          dir('LuminAVfrontend') {
            echo 'üõ†Ô∏è Construyendo imagen del frontend...'
            bat "docker build -t %FRONTEND_IMG%:%VERSION% ."
            bat "docker push %FRONTEND_IMG%:%VERSION%"
          }
        }
      }
    }

    stage('Tag latest') {
      steps {
        echo 'üè∑Ô∏è Etiquetando im√°genes como latest...'
        bat 'docker tag %BACKEND_IMG%:%VERSION% %BACKEND_IMG%:latest'
        bat 'docker tag %FRONTEND_IMG%:%VERSION% %FRONTEND_IMG%:latest'
        bat 'docker push %BACKEND_IMG%:latest'
        bat 'docker push %FRONTEND_IMG%:latest'
      }
    }

    stage('Deploy (opcional)') {
      when { expression { return params.DEPLOY == true } }
      steps {
        echo 'üöÄ Desplegando aplicaci√≥n (opcional)...'
        // Aqu√≠ podr√≠as agregar comandos de despliegue (Ansible, Docker Compose, K8s, etc.)
      }
    }
  }

  post {
    success {
      echo '‚úÖ Pipeline completado exitosamente. Im√°genes subidas a Docker Hub.'
    }
    failure {
      echo '‚ùå Error en el pipeline. Revisa los logs de Jenkins.'
    }
  }
}
