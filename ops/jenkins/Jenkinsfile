pipeline {
  agent any

  environment {
    REGISTRY = "docker.io"
    ORG = "luiferfox"
    BACKEND_IMG = "${REGISTRY}/${ORG}/luminav-backend"
    FRONTEND_IMG = "${REGISTRY}/${ORG}/luminav-frontend"
    VERSION = "${BUILD_NUMBER}"
  }

  parameters {
    booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Desplegar autom√°ticamente al finalizar el build')
  }

  stages {

    stage('Checkout') {
      steps {
        echo 'üîç Clonando el c√≥digo desde GitHub...'
        checkout scm
      }
    }

    stage('Backend: Test') {
      steps {
        dir('LuminAV/LuminAV_backend') {
          echo 'üß™ Ejecutando pruebas del backend (JUnit)...'
          // Limpia, compila y prueba usando el POM
          bat 'mvn -B -q clean test -Dmaven.test.failure.ignore=true'
        }
      }
      post {
        always {
          // Publicar resultados de pruebas JUnit
          junit 'LuminAV/LuminAV_backend/target/surefire-reports/*.xml'
        }
      }
    }

    stage('Frontend: Test (opcional)') {
      when { expression { fileExists('LuminAV/LuminAV_frontend/package.json') } }
      steps {
        dir('LuminAV/LuminAV_frontend') {
          echo 'üß™ Ejecutando pruebas del frontend (Vitest)...'
          bat 'npm ci'
          bat 'npm run test -- --run || echo "‚ö†Ô∏è No se encontraron pruebas o se omitieron"'
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        echo 'üê≥ Iniciando sesi√≥n en Docker Hub, construyendo y subiendo im√°genes...'
        withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {

          // Login a DockerHub
          bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'

          // Construcci√≥n de im√°genes backend y frontend
          dir('LuminAV/LuminAV_backend') {
            echo 'üõ†Ô∏è Construyendo imagen del backend...'
            bat "docker build -t %BACKEND_IMG%:%VERSION% ."
            bat "docker push %BACKEND_IMG%:%VERSION%"
          }

          dir('LuminAV/LuminAV_frontend') {
            echo 'üõ†Ô∏è Construyendo imagen del frontend...'
            bat "docker build -t %FRONTEND_IMG%:%VERSION% ."
            bat "docker push %FRONTEND_IMG%:%VERSION%"
          }
        }
      }
    }

    stage('Tag latest') {
      steps {
        echo 'üè∑Ô∏è Etiquetando im√°genes como latest...'
        bat 'docker tag %BACKEND_IMG%:%VERSION% %BACKEND_IMG%:latest'
        bat 'docker tag %FRONTEND_IMG%:%VERSION% %FRONTEND_IMG%:latest'
        bat 'docker push %BACKEND_IMG%:latest'
        bat 'docker push %FRONTEND_IMG%:latest'
      }
    }

    stage('Deploy (opcional)') {
      when { expression { return params
