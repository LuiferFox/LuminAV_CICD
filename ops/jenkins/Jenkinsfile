pipeline {
  agent any

  environment {
    REGISTRY = "docker.io"
    ORG = "luiferfox"
    BACKEND_IMG = "${REGISTRY}/${ORG}/luminav-backend"
    FRONTEND_IMG = "${REGISTRY}/${ORG}/luminav-frontend"
    VERSION = "${BUILD_NUMBER}"
  }

  stages {

    stage('Checkout') {
      steps {
        echo 'üîç Clonando el c√≥digo desde GitHub...'
        checkout scm
      }
    }

    stage('Backend: Test') {
      steps {
        dir('LuminAV_backend') {
          echo 'üß™ Ejecutando pruebas del backend (JUnit)...'
          // Ejecuta Maven en Windows
          bat 'mvn -q clean test'
        }
      }
      post {
        always {
          junit 'LuminAV_backend/target/surefire-reports/*.xml'
        }
      }
    }

    stage('Frontend: Test (opcional)') {
      steps {
        dir('LuminAV_frontend') {
          echo 'üß™ Ejecutando pruebas del frontend (Vitest)...'
          // Instalaci√≥n y ejecuci√≥n en Windows
          bat 'npm ci'
          bat 'npm run test -- --run'
        }
      }
    }

    stage('Docker Login & Push') {
      steps {
        echo 'üê≥ Iniciando sesi√≥n en Docker Hub y subiendo im√°genes existentes...'
        withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          // Login y push con PowerShell o CMD
          bat """
          echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin
          docker tag luminav-backend:latest %BACKEND_IMG%:%VERSION%
          docker tag luminav-frontend:latest %FRONTEND_IMG%:%VERSION%
          docker push %BACKEND_IMG%:%VERSION%
          docker push %FRONTEND_IMG%:%VERSION%
          """
        }
      }
    }

    stage('Tag latest') {
      steps {
        echo 'üè∑Ô∏è Etiquetando como latest y empujando al registro...'
        bat """
        docker tag %BACKEND_IMG%:%VERSION% %BACKEND_IMG%:latest
        docker tag %FRONTEND_IMG%:%VERSION% %FRONTEND_IMG%:latest
        docker push %BACKEND_IMG%:latest
        docker push %FRONTEND_IMG%:latest
        """
      }
    }

    stage('Deploy (opcional)') {
      when { expression { return params.DEPLOY == true } }
      steps {
        echo 'üöÄ Desplegando aplicaci√≥n (opcional)...'
        // Aqu√≠ podr√≠as usar Ansible, kubectl o scripts locales
      }
    }
  }

  parameters {
    booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Desplegar autom√°ticamente al finalizar el build')
  }
}

